sorted_ord_test <- apply(test_df, 2, order)  # Get sorted indices
sorted_data_test <- apply(test_df, 2, sort)#row means train data
normalized_test <- matrix(row_means[sorted_ord_test], ncol=ncol(train_df))
dimnames(normalized_test) <- dimnames(test_df)
#Check if step 4 worked
print(sorted_data_test[1:6,1:6])
print(sorted_ord_test[1:6,1:6])
print(normalized_test[1:6,1:6])
# Convert back to data frames and reattach gene symbols
train_genes <- row.names(train_df)
test_genes <- row.names(test_df)
normalized_train_df <- data.frame(Gene = train_genes, normalized_train)
normalized_test_df <- data.frame(Gene = test_genes, normalized_test)
# Set the correct column names for the normalized data frames
#"gene needed, otherwise gene symbol names infiltrate the actual dataset"
colnames(normalized_train_df) <- c("Gene_symbol", colnames(train_df))  # Ensure first column is "Gene"
colnames(normalized_test_df) <- c("Gene_symbol", colnames(test_df))    # Ensure first column is "Gene"
return(list(train = normalized_train_df, test = normalized_test_df))
}
# Split dataset
split_data <- split_dataset(excel_data)
# Apply manual quantile normalization
normalized_data <- quantile_normalization(split_data$train, split_data$test)
# Check output
head(normalized_data$train)
dim(normalized_data$train)
dim(normalized_data$test)
# Boxplot before and after normalization
boxplot(as.matrix(excel_data), main = "Before Normalization")
boxplot(as.matrix(normalized_data$train[,-1]), main = "After Normalization")
# Export data
write_xlsx(normalized_data$train, "normalized_training_dataset.xlsx")
write_xlsx(normalized_data$test, "normalized_testing_dataset.xlsx")
library(preprocessCore)
library(readxl)
library(writexl)
# Load dataset
excel_data <- read_excel("cleaned_dataset.xlsx")
excel_data <- as.data.frame(excel_data)
# Store gene symbols before removing them
row.names(excel_data) <- excel_data[[1]]
excel_data <- excel_data[, -1]
head(excel_data)
# Function to split dataset into training (70%) and testing (30%)
split_dataset <- function(df, train_ratio = 0.7) {
set.seed(123)
total_cols <- ncol(df)
train_indices <- sample(total_cols, size = round(train_ratio * total_cols))
train_set <- df[, train_indices, drop = FALSE]
test_set <- df[, -train_indices, drop = FALSE]
return(list(train = train_set, test = test_set))
}
# Function for manual quantile normalization
quantile_normalization <- function(train_df, test_df) {
# Step 1: Sort each column and store original row indices
sorted_ord <- apply(train_df, 2, order)  # Get sorted indices
sorted_data <- apply(train_df, 2, sort)  # Sort values
# Step 2: Compute row-wise means
row_means <- rowMeans(sorted_data)
# Step 3: Assign normalized values back to original training ranks
normalized_train <- matrix(row_means[sorted_ord], ncol=ncol(train_df))
dimnames(normalized_train) <- dimnames(train_df)
#Check if step 3 worked
print(sorted_data[1:6,1:6])
print(sorted_ord[1:6,1:6])
print(normalized_train[1:6,1:6])
# Step 4: Normalize the test set using interpolation
sorted_ord_test <- apply(test_df, 2, order)  # Get sorted indices
sorted_data_test <- apply(test_df, 2, sort)#row means train data
normalized_test <- matrix(row_means[sorted_ord_test], ncol=ncol(train_df))
dimnames(normalized_test) <- dimnames(test_df)
#Check if step 4 worked
print(sorted_data_test[1:6,1:6])
print(sorted_ord_test[1:6,1:6])
print(normalized_test[1:6,1:6])
# Convert back to data frames and reattach gene symbols
train_genes <- row.names(train_df)
test_genes <- row.names(test_df)
normalized_train_df <- data.frame(Gene = train_genes, normalized_train)
normalized_test_df <- data.frame(Gene = test_genes, normalized_test)
# Set the correct column names for the normalized data frames
#"gene needed, otherwise gene symbol names infiltrate the actual dataset"
colnames(normalized_train_df) <- c("Gene_symbol", colnames(train_df))  # Ensure first column is "Gene"
colnames(normalized_test_df) <- c("Gene_symbol", colnames(test_df))    # Ensure first column is "Gene"
return(list(train = normalized_train_df, test = normalized_test_df))
}
# Split dataset
split_data <- split_dataset(excel_data)
# Apply manual quantile normalization
normalized_data <- quantile_normalization(split_data$train, split_data$test)
library(preprocessCore)
library(readxl)
library(writexl)
# Load dataset
excel_data <- read_excel("cleaned_dataset.xlsx")
excel_data <- as.data.frame(excel_data)
# Store gene symbols before removing them
row.names(excel_data) <- excel_data[[1]]
excel_data <- excel_data[, -1]
head(excel_data)
# Function to split dataset into training (70%) and testing (30%)
split_dataset <- function(df, train_ratio = 0.7) {
set.seed(123)
total_cols <- ncol(df)
train_indices <- sample(total_cols, size = round(train_ratio * total_cols))
train_set <- df[, train_indices, drop = FALSE]
test_set <- df[, -train_indices, drop = FALSE]
return(list(train = train_set, test = test_set))
}
# Function for manual quantile normalization
quantile_normalization <- function(train_df, test_df) {
# Step 1: Sort each column and store original row indices
sorted_ord <- apply(train_df, 2, order)  # Get sorted indices
sorted_data <- apply(train_df, 2, sort)  # Sort values
# Step 2: Compute row-wise means
row_means <- rowMeans(sorted_data)
# Step 3: Assign normalized values back to original training ranks
normalized_train <- matrix(row_means[sorted_ord], ncol=ncol(train_df))
dimnames(normalized_train) <- dimnames(train_df)
#Check if step 3 worked
print(sorted_data[1:6,1:6])
print(sorted_ord[1:6,1:6])
print(normalized_train[1:6,1:6])
# Step 4: Normalize the test set using interpolation
sorted_ord_test <- apply(test_df, 2, order)  # Get sorted indices
sorted_data_test <- apply(test_df, 2, sort)#row means train data
normalized_test <- matrix(row_means[sorted_ord_test], ncol=ncol(test_df))
dimnames(normalized_test) <- dimnames(test_df)
#Check if step 4 worked
print(sorted_data_test[1:6,1:6])
print(sorted_ord_test[1:6,1:6])
print(normalized_test[1:6,1:6])
# Convert back to data frames and reattach gene symbols
train_genes <- row.names(train_df)
test_genes <- row.names(test_df)
normalized_train_df <- data.frame(Gene = train_genes, normalized_train)
normalized_test_df <- data.frame(Gene = test_genes, normalized_test)
# Set the correct column names for the normalized data frames
#"gene needed, otherwise gene symbol names infiltrate the actual dataset"
colnames(normalized_train_df) <- c("Gene_symbol", colnames(train_df))  # Ensure first column is "Gene"
colnames(normalized_test_df) <- c("Gene_symbol", colnames(test_df))    # Ensure first column is "Gene"
return(list(train = normalized_train_df, test = normalized_test_df))
}
# Split dataset
split_data <- split_dataset(excel_data)
# Apply manual quantile normalization
normalized_data <- quantile_normalization(split_data$train, split_data$test)
# Check output
head(normalized_data$train)
dim(normalized_data$train)
dim(normalized_data$test)
# Boxplot before and after normalization
boxplot(as.matrix(excel_data), main = "Before Normalization")
boxplot(as.matrix(normalized_data$train[,-1]), main = "After Normalization")
# Export data
write_xlsx(normalized_data$train, "normalized_training_dataset.xlsx")
write_xlsx(normalized_data$test, "normalized_testing_dataset.xlsx")
library(readxl)
library(writexl)
# Load dataset
training_data <- read_excel("normalized_training_dataset.xlsx")
testing_data <- read_excel("normalized_testing_dataset.xlsx")
gene_symbol_train <- training_data[[1]]
gene_symbol_test <- testing_data[[1]]
# Store original column names (excluding the first column)
training_colnames <- colnames(training_data)[-1]
#need both testing & training on scaling testing, how?
# Apply z-standardization (excluding the first column)
library(matrixStats)
Z_standardization<-function(x){
means<-rowMeans(x)
sds<-rowSds(as.matrix(x))
z<-(x-means) / sds
return(list(means_train=means,sds_train=sds,train_scaled=z))
}
training_scaled <- Z_standardization(training_data[-1])
#subtract mean/sd of train set
testing_scaled<-as.matrix((testing_data[-1] - training_scaled[["means_train"]])
/ training_scaled[["sds_train"]])
#convert both datasets back to data frame
training_scaled <- as.data.frame(training_scaled)
testing_scaled <- as.data.frame(testing_scaled)
#remove the mean and sd columns from the training dataset
training_scaled <- training_scaled[, -c(1:2)]
#return the names of the columns to the original
colnames(training_scaled) <- training_colnames
#add back gene symbol
training_scaled$Gene_symbol <- gene_symbol_train
testing_scaled$Gene_symbol <- gene_symbol_test
# Reorder columns to have gene names as the first column
training_scaled <- training_scaled[, c("Gene_symbol", setdiff(colnames(training_scaled), "Gene_symbol"))]
testing_scaled <- testing_scaled[, c("Gene_symbol", setdiff(colnames(testing_scaled), "Gene_symbol"))]
head(training_scaled)
summary(training_scaled)
write_xlsx(training_scaled, "training_scaled_dataset.xlsx")
write_xlsx(testing_scaled, "testing_scaled_dataset.xlsx")
library(readxl)
library(writexl)
# Load datasets
train_data <- read_excel("training_scaled_dataset.xlsx")
test_data <- read_excel("testing_scaled_dataset.xlsx")
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(train_data)[-1]
# Identify whether samples are lymph node negative or positive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe & transpose (Make sure to keep the labels in the correct format)
sample_labels <- data.frame(Label = status_binary)
# Transpose train_data so that samples are rows and genes are columns
train_data_t <- as.data.frame(t(train_data[-1]))  # Exclude the 'Gene_symbol' column before transposing
colnames(train_data_t) <- train_data$Gene_symbol  # Rename columns using Gene_symbol
# Reset row names to avoid "V1, V2, ..." issue (using the sample names as row names)
rownames(train_data_t) <- colnames(train_data)[-1]  # Use the sample names as row names
# Add the Label column (Ensure the number of rows matches between train_data_t and sample_labels)
train_data_final <- cbind(train_data_t, Label = sample_labels$Label)  # Add Label column
train_data_final$Label <- as.factor(train_data_final$Label)
# Repeat for testing datalibrary(readxl)
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(test_data)[-1]
# Identify whether samples are lymph node negative or positive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe & transpose (Make sure to keep the labels in the correct format)
sample_labels <- data.frame(Label = status_binary)
# Transpose test_data so that samples are rows and genes are columns
test_data_t <- as.data.frame(t(test_data[-1]))  # Exclude the 'Gene_symbol' column before transposing
colnames(test_data_t) <- test_data$Gene_symbol  # Rename columns using Gene_symbol
# Reset row names to avoid "V1, V2, ..." issue (using the sample names as row names)
rownames(test_data_t) <- colnames(test_data)[-1]  # Use the sample names as row names
# Add the Label column (Ensure the number of rows matches between test_data_t and sample_labels)
test_data_final <- cbind(test_data_t, Label = sample_labels$Label)  # Add Label column
#Logistic regression
library(tidymodels)
library(glmnet)
logistic_regression_train <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification") %>%
fit(Label ~ ., data = train_data_final)
# Print model summary
summary(logistic_regression_train$fit)
#package, library
lr_prediction_test <- predict(logistic_regression_train, new_data = test_data_final)
View(train_data_final)
View(test_data_final)
library(randomForest)
set.seed(123)
random_forest_train <- randomForest(Label ~ ., #what is predicted, what do I put?
data = train_data_final)
library(preprocessCore)
library(readxl)
library(writexl)
# Load dataset
excel_data <- read_excel("cleaned_dataset.xlsx")
excel_data <- as.data.frame(excel_data)
# Store gene symbols before removing them
row.names(excel_data) <- excel_data[[1]]
excel_data <- excel_data[, -1]
head(excel_data)
# Function to split dataset into training (70%) and testing (30%)
split_dataset <- function(df, train_ratio = 0.7) {
set.seed(123)
total_cols <- ncol(df)
train_indices <- sample(total_cols, size = round(train_ratio * total_cols))
train_set <- df[, train_indices, drop = FALSE]
test_set <- df[, -train_indices, drop = FALSE]
return(list(train = train_set, test = test_set))
}
# Function for manual quantile normalization
quantile_normalization <- function(train_df, test_df) {
# Step 1: Sort each column and store original row indices
sorted_ord <- apply(train_df, 2, order)  # Get sorted indices
sorted_data <- apply(train_df, 2, sort)  # Sort values
# Step 2: Compute row-wise means
row_means <- rowMeans(sorted_data)
# Step 3: Assign normalized values back to original training ranks
normalized_train <- matrix(row_means[sorted_ord], ncol=ncol(train_df))
dimnames(normalized_train) <- dimnames(train_df)
#Check if step 3 worked
print(sorted_data[1:6,1:6])
print(sorted_ord[1:6,1:6])
print(normalized_train[1:6,1:6])
# Step 4: Normalize the test set using interpolation
sorted_ord_test <- apply(test_df, 2, order)  # Get sorted indices
sorted_data_test <- apply(test_df, 2, sort)#row means train data
normalized_test <- matrix(row_means[sorted_ord_test], ncol=ncol(test_df))
dimnames(normalized_test) <- dimnames(test_df)
#Check if step 4 worked
print(sorted_data_test[1:6,1:6])
print(sorted_ord_test[1:6,1:6])
print(normalized_test[1:6,1:6])
# Convert back to data frames and reattach gene symbols
train_genes <- row.names(train_df)
test_genes <- row.names(test_df)
normalized_train_df <- data.frame(Gene = train_genes, normalized_train)
normalized_test_df <- data.frame(Gene = test_genes, normalized_test)
# Set the correct column names for the normalized data frames
#"gene needed, otherwise gene symbol names infiltrate the actual dataset"
colnames(normalized_train_df) <- c("Gene_symbol", colnames(train_df))  # Ensure first column is "Gene"
colnames(normalized_test_df) <- c("Gene_symbol", colnames(test_df))    # Ensure first column is "Gene"
return(list(train = normalized_train_df, test = normalized_test_df))
}
# Split dataset
split_data <- split_dataset(excel_data)
# Apply manual quantile normalization
normalized_data <- quantile_normalization(split_data$train, split_data$test)
# Check output
head(normalized_data$train)
# Boxplot before and after normalization
boxplot(as.matrix(excel_data), main = "Before Normalization")
boxplot(as.matrix(normalized_data$train[,-1]), main = "After Normalization")
boxplot(as.matrix(excel_data), main = "Before Normalization", horizontal = TRUE)
boxplot(as.matrix(normalized_data$train[,-1]), main = "After Normalization", horizontal = TRUE)
boxplot(as.matrix(normalized_data$train[,-1]), main = "After Normalization")
boxplot(as.matrix(normalized_data$train[,-1]), main = "After Normalization", horizontal = TRUE)
boxplot(as.matrix(normalized_data$train[,-1]), main = "After Normalization")
boxplot(as.matrix(excel_data), main = "Before Normalization", las=2)
#smaller font
boxplot(as.matrix(excel_data), main = "Before Normalization", las=2)
boxplot(as.matrix(normalized_data$train[,-1]), main = "After Normalization", las=2)
boxplot(as.matrix(excel_data), main = "Before Normalization", las=1)
boxplot(as.matrix(excel_data), main = "Before Normalization", las=10)
boxplot(as.matrix(excel_data), main = "Before Normalization", las=2)
boxplot(as.matrix(normalized_data$train[,-1]), main = "After Normalization", las=2)
boxplot(as.matrix(excel_data), main = "Before Normalization", las=2)
library(preprocessCore)
library(readxl)
library(writexl)
# Load dataset
excel_data <- read_excel("cleaned_dataset.xlsx")
excel_data <- as.data.frame(excel_data)
# Store gene symbols before removing them
row.names(excel_data) <- excel_data[[1]]
excel_data <- excel_data[, -1]
head(excel_data)
# Function to split dataset into training (70%) and testing (30%)
split_dataset <- function(df, train_ratio = 0.7) {
set.seed(123)
total_cols <- ncol(df)
train_indices <- sample(total_cols, size = round(train_ratio * total_cols))
train_set <- df[, train_indices, drop = FALSE]
test_set <- df[, -train_indices, drop = FALSE]
return(list(train = train_set, test = test_set))
}
# Function for manual quantile normalization
quantile_normalization <- function(train_df, test_df) {
# Step 1: Sort each column and store original row indices
sorted_ord <- apply(train_df, 2, order)  # Get sorted indices
sorted_data <- apply(train_df, 2, sort)  # Sort values
# Step 2: Compute row-wise means
row_means <- rowMeans(sorted_data)
# Step 3: Assign normalized values back to original training ranks
normalized_train <- matrix(row_means[sorted_ord], ncol=ncol(train_df))
dimnames(normalized_train) <- dimnames(train_df)
#Check if step 3 worked
print(sorted_data[1:6,1:6])
print(sorted_ord[1:6,1:6])
print(normalized_train[1:6,1:6])
# Step 4: Normalize the test set using interpolation
sorted_ord_test <- apply(test_df, 2, order)  # Get sorted indices
sorted_data_test <- apply(test_df, 2, sort)#row means train data
normalized_test <- matrix(row_means[sorted_ord_test], ncol=ncol(test_df))
dimnames(normalized_test) <- dimnames(test_df)
#Check if step 4 worked
print(sorted_data_test[1:6,1:6])
print(sorted_ord_test[1:6,1:6])
print(normalized_test[1:6,1:6])
# Convert back to data frames and reattach gene symbols
train_genes <- row.names(train_df)
test_genes <- row.names(test_df)
normalized_train_df <- data.frame(Gene = train_genes, normalized_train)
normalized_test_df <- data.frame(Gene = test_genes, normalized_test)
# Set the correct column names for the normalized data frames
#"gene needed, otherwise gene symbol names infiltrate the actual dataset"
colnames(normalized_train_df) <- c("Gene_symbol", colnames(train_df))  # Ensure first column is "Gene"
colnames(normalized_test_df) <- c("Gene_symbol", colnames(test_df))    # Ensure first column is "Gene"
return(list(train = normalized_train_df, test = normalized_test_df))
}
# Split dataset
split_data <- split_dataset(excel_data)
# Apply manual quantile normalization
normalized_data <- quantile_normalization(split_data$train, split_data$test)
# Check output
head(normalized_data$train)
dim(test_data)
dim(train_data)
# Boxplot before and after normalization
boxplot(as.matrix(excel_data), main = "Before Normalization")
boxplot(as.matrix(normalized_data$train[,-1]), main = "After Normalization")
#smaller font
boxplot(as.matrix(excel_data), main = "Before Normalization", las=2)
boxplot(as.matrix(normalized_data$train[,-1]), main = "After Normalization", las=2)
# Export data
write_xlsx(normalized_data$train, "normalized_training_dataset.xlsx")
write_xlsx(normalized_data$test, "normalized_testing_dataset.xlsx")
library(readxl)
library(writexl)
# Load dataset
training_data <- read_excel("normalized_training_dataset.xlsx")
testing_data <- read_excel("normalized_testing_dataset.xlsx")
gene_symbol_train <- training_data[[1]]
gene_symbol_test <- testing_data[[1]]
# Store original column names (excluding the first column)
training_colnames <- colnames(training_data)[-1]
#need both testing & training on scaling testing, how?
# Apply z-standardization (excluding the first column)
library(matrixStats)
Z_standardization<-function(x){
means<-rowMeans(x)
sds<-rowSds(as.matrix(x))
z<-(x-means) / sds
return(list(means_train=means,sds_train=sds,train_scaled=z))
}
training_scaled <- Z_standardization(training_data[-1])
#subtract mean/sd of train set
testing_scaled<-as.matrix((testing_data[-1] - training_scaled[["means_train"]])
/ training_scaled[["sds_train"]])
#convert both datasets back to data frame
training_scaled <- as.data.frame(training_scaled)
testing_scaled <- as.data.frame(testing_scaled)
#remove the mean and sd columns from the training dataset
training_scaled <- training_scaled[, -c(1:2)]
#return the names of the columns to the original
colnames(training_scaled) <- training_colnames
#add back gene symbol
training_scaled$Gene_symbol <- gene_symbol_train
testing_scaled$Gene_symbol <- gene_symbol_test
# Reorder columns to have gene names as the first column
training_scaled <- training_scaled[, c("Gene_symbol", setdiff(colnames(training_scaled), "Gene_symbol"))]
testing_scaled <- testing_scaled[, c("Gene_symbol", setdiff(colnames(testing_scaled), "Gene_symbol"))]
head(training_scaled)
summary(training_scaled)
#histogram
#density plot
#both show mean, distribution is unchanged
write_xlsx(training_scaled, "training_scaled_dataset.xlsx")
write_xlsx(testing_scaled, "testing_scaled_dataset.xlsx")
library(readxl)
library(writexl)
# Load datasets
train_data <- read_excel("training_scaled_dataset.xlsx")
test_data <- read_excel("testing_scaled_dataset.xlsx")
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(train_data)[-1]
# Identify whether samples are lymph node negative or positive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe & transpose (Make sure to keep the labels in the correct format)
sample_labels <- data.frame(Label = status_binary)
# Transpose train_data so that samples are rows and genes are columns
train_data_t <- as.data.frame(t(train_data[-1]))  # Exclude the 'Gene_symbol' column before transposing
colnames(train_data_t) <- train_data$Gene_symbol  # Rename columns using Gene_symbol
# Reset row names to avoid "V1, V2, ..." issue (using the sample names as row names)
rownames(train_data_t) <- colnames(train_data)[-1]  # Use the sample names as row names
# Add the Label column (Ensure the number of rows matches between train_data_t and sample_labels)
train_data_final <- cbind(train_data_t, Label = sample_labels$Label)  # Add Label column
train_data_final$Label <- as.factor(train_data_final$Label)
# Repeat for testing datalibrary(readxl)
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(test_data)[-1]
# Identify whether samples are lymph node negative or positive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe & transpose (Make sure to keep the labels in the correct format)
sample_labels <- data.frame(Label = status_binary)
# Transpose test_data so that samples are rows and genes are columns
test_data_t <- as.data.frame(t(test_data[-1]))  # Exclude the 'Gene_symbol' column before transposing
colnames(test_data_t) <- test_data$Gene_symbol  # Rename columns using Gene_symbol
# Reset row names to avoid "V1, V2, ..." issue (using the sample names as row names)
rownames(test_data_t) <- colnames(test_data)[-1]  # Use the sample names as row names
# Add the Label column (Ensure the number of rows matches between test_data_t and sample_labels)
test_data_final <- cbind(test_data_t, Label = sample_labels$Label)  # Add Label column
#Logistic regression
library(tidymodels)
library(glmnet)
logistic_regression_train <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification") %>%
fit(Label ~ ., data = train_data_final)
# Print model summary
summary(logistic_regression_train$fit)
lr_prediction_test <- predict(logistic_regression_train, new_data = test_data_final)
dim(train_data_final)
dim(test_data_final)
library(randomForest)
set.seed(123)
random_forest_train <- randomForest(Label ~ ., #what is predicted, what do I put?
data = train_data_final)
lr_prediction_test <- predict(logistic_regression_train, new_data = test_data_final)
summary(lr_prediction_test)
table(test_data_final$Label)
boxplot(as.matrix(excel_data), main = "Before Normalization", size=10)
boxplot(as.matrix(excel_data), main = "Before Normalization", size=5)
boxplot(as.matrix(excel_data), main = "Before Normalization", las=2)
boxplot(as.matrix(normalized_data$train[,-1]), main = "After Normalization", las=2)
hist(training_data)
hist(training_data[,-1])
hist(training_scaled[,-1])
hist(training_data[,-1])
hist(train_data)
hist(train_data[,-1])
head(training_scaled)
class(training_data$`UTSW#32-IIIC`)
class(training_scaled$`UTSW#32-IIIC`)
hist(training_data[,-1])
class(training_data)
hist(training_data$`UTSW#32-IIIC`)
hist(training_scaled$`UTSW#32-IIIC`)
density(training_data$`UTSW#32-IIIC`)
plot(density(training_data$`UTSW#32-IIIC`))
plot(density(training_scaled$`UTSW#32-IIIC`))
plot(density(training_data$`UTSW#32-IIIC`))
plot(density(training_scaled$`UTSW#32-IIIC`))
hist(training_data$`UTSW#32-IIIC`)
hist(training_scaled$`UTSW#32-IIIC`)
hist(training_data$`UTSW#32-IIIC`)
hist(training_scaled$`UTSW#32-IIIC`)
