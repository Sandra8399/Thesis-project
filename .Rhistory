library(readxl)
library(writexl)
train_data <- read_excel("training_scaled_dataset.xlsx")
test_data <- read_excel("testing_scaled_dataset.xlsx")
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(train_data)[-1]
#Identify whether samples are lymph node negative or possitive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe
sample_labels <- as.data.frame(t(status_binary))
# Ensure column names match train_data (excluding first column)
colnames(sample_labels) <- sample_status
# Add "Gene_symbol" column with an identifier (e.g., "Label")
sample_labels <- cbind(Gene_symbol = "Label", sample_labels)
# Append sample_labels as a new row
train_data <- bind_rows(train_data, sample_labels)
# Transpose the training dataset
train_data <- as.data.frame(t(train_data))
#Make the last column numeric
train_data$Label <- as.numeric(train_data$Label)
head(train_data)
View(train_data)
library(readxl)
library(writexl)
library(dplyr)
# Load datasets
train_data <- read_excel("training_scaled_dataset.xlsx")
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(train_data)[-1]
# Identify whether samples are lymph node negative or positive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe & transpose
sample_labels <- as.data.frame(t(status_binary))
# Ensure column names match train_data (excluding first column)
colnames(sample_labels) <- sample_status
# Convert label row into a proper column
sample_labels <- as.data.frame(t(sample_labels))
sample_labels <- cbind(Sample = rownames(sample_labels), Label = as.numeric(sample_labels[,1]))
# Transpose train_data so that samples are rows and genes are columns
train_data_t <- as.data.frame(t(train_data[-1]))
colnames(train_data_t) <- train_data$Gene_symbol  # Rename columns using Gene_symbol
train_data_t$Sample <- rownames(train_data_t)  # Add sample names
# Merge features with labels
train_data_final <- left_join(train_data_t, sample_labels, by = "Sample")
rlang::last_trace()
library(readxl)
library(writexl)
train_data <- read_excel("training_scaled_dataset.xlsx")
test_data <- read_excel("testing_scaled_dataset.xlsx")
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(train_data)[-1]
#Identify whether samples are lymph node negative or possitive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe
sample_labels <- as.data.frame(t(status_binary))
# Ensure column names match train_data (excluding first column)
colnames(sample_labels) <- sample_status
# Add "Gene_symbol" column with an identifier (e.g., "Label")
sample_labels <- cbind(Gene_symbol = "Label", sample_labels)
str(sample_labels)
# Append sample_labels as a new row
train_data <- bind_rows(train_data, sample_labels)
str(train_data)
library(readxl)
library(writexl)
train_data <- read_excel("training_scaled_dataset.xlsx")
test_data <- read_excel("testing_scaled_dataset.xlsx")
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(train_data)[-1]
#Identify whether samples are lymph node negative or possitive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe
sample_labels <- data.frame(Sample = sample_status, Label = status_binary)
sample_labels <- as.data.frame(t(sample_labels))
t<-(train_data)[-1]
train_dat <- rbind(t,sample_labels)
library(readxl)
library(writexl)
train_data <- read_excel("training_scaled_dataset.xlsx")
test_data <- read_excel("testing_scaled_dataset.xlsx")
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(train_data)[-1]
#Identify whether samples are lymph node negative or possitive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe
sample_labels <- as.data.frame(t(status_binary))
# Ensure column names match train_data (excluding first column)
colnames(sample_labels) <- sample_status
# Add "Gene_symbol" column with an identifier (e.g., "Label")
sample_labels <- cbind(Gene_symbol = "Label", sample_labels)
# Append sample_labels as a new row
train_data <- bind_rows(train_data, sample_labels)
print(train_data)
train_data <- bind_rows(train_data, sample_labels)
train_data <- as.data.frame(t(train_data))
print(train_data)
# Append sample_labels as a new row
train_data <- bind_rows(train_data, sample_labels)
# Trnspose the dataset
train_data <- as.data.frame(t(train_data))
#Make label into numeric
train_data$Label <- as.numeric(train_data$Label)
# Append sample_labels as a new row
train_data <- bind_rows(train_data, sample_labels)
print(train_data)
library(readxl)
library(writexl)
train_data <- read_excel("training_scaled_dataset.xlsx")
test_data <- read_excel("testing_scaled_dataset.xlsx")
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(train_data)[-1]
#Identify whether samples are lymph node negative or possitive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe
sample_labels <- as.data.frame(t(status_binary))
# Ensure column names match train_data (excluding first column)
colnames(sample_labels) <- sample_status
# Add "Gene_symbol" column with an identifier (e.g., "Label")
sample_labels <- cbind(Gene_symbol = "Label", sample_labels)
# Append sample_labels as a new row
train_data <- bind_rows(train_data, sample_labels)
print(train_data)
str(train_data)
library(readxl)
library(writexl)
train_data <- read_excel("training_scaled_dataset.xlsx")
test_data <- read_excel("testing_scaled_dataset.xlsx")
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(train_data)[-1]
#Identify whether samples are lymph node negative or possitive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe
sample_labels <- as.data.frame(t(status_binary))
# Ensure column names match train_data (excluding first column)
colnames(sample_labels) <- sample_status
# Add "Gene_symbol" column with an identifier (e.g., "Label")
sample_labels <- cbind(Gene_symbol = "Label", sample_labels)
# Append sample_labels as a new row
train_data <- bind_rows(train_data, sample_labels)
print(train_data)
View(train_data)
library(readxl)
library(writexl)
train_data <- read_excel("training_scaled_dataset.xlsx")
test_data <- read_excel("testing_scaled_dataset.xlsx")
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(train_data)[-1]
#Identify whether samples are lymph node negative or possitive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe
sample_labels <- as.data.frame(t(status_binary))
# Ensure column names match train_data (excluding first column)
colnames(sample_labels) <- sample_status
# Add "Gene_symbol" column with an identifier (e.g., "Label")
sample_labels <- cbind(Gene_symbol = "Label", sample_labels)
# Append sample_labels as a new row
train_datas <- bind_rows(train_data, sample_labels)
# Trnspose the dataset
train_data <- as.data.frame(t(train_datas))
rownames(train_data) <- colnames(train_datas)
print(train_data)
#Make label into numeric
train_data$Label <- as.numeric(train_data$Label)
library(readxl)
library(writexl)
train_data <- read_excel("training_scaled_dataset.xlsx")
test_data <- read_excel("testing_scaled_dataset.xlsx")
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(train_data)[-1]
#Identify whether samples are lymph node negative or possitive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe
sample_labels <- as.data.frame(t(status_binary))
# Ensure column names match train_data (excluding first column)
colnames(sample_labels) <- sample_status
# Add "Gene_symbol" column with an identifier (e.g., "Label")
sample_labels <- cbind(Gene_symbol = "Label", sample_labels)
# Append sample_labels as a new row
train_data <- bind_rows(train_data, sample_labels)
# Trnspose the dataset
train_data <- as.data.frame(t(train_data))
#remove first row
train_data = train_data[-1,]
print(train_data)
library(readxl)
library(writexl)
train_data <- read_excel("training_scaled_dataset.xlsx")
test_data <- read_excel("testing_scaled_dataset.xlsx")
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(train_data)[-1]
#Identify whether samples are lymph node negative or possitive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe
sample_labels <- as.data.frame(t(status_binary))
# Ensure column names match train_data (excluding first column)
colnames(sample_labels) <- sample_status
# Add "Gene_symbol" column with an identifier (e.g., "Label")
sample_labels <- cbind(Gene_symbol = "Label", sample_labels)
# Append sample_labels as a new row
train_data <- bind_rows(train_data, sample_labels)
# Trnspose the dataset
train_data <- as.data.frame(t(train_data))
print(train_data)
train_data = train_data[-1,]
print(train_data)
sample_labels
library(readxl)
library(writexl)
train_data <- read_excel("training_scaled_dataset.xlsx")
test_data <- read_excel("testing_scaled_dataset.xlsx")
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(train_data)[-1]
#Identify whether samples are lymph node negative or possitive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe
sample_labels <- as.data.frame(t(status_binary))
# Ensure column names match train_data (excluding first column)
colnames(sample_labels) <- sample_status
# Add "Gene_symbol" column with an identifier (e.g., "Label")
sample_labels <- cbind(Gene_symbol = "Label", sample_labels)
# Append sample_labels as a new row
train_data <- bind_rows(train_data, sample_labels)
train_data
View(train_data)
sample_labels
library(readxl)
library(writexl)
train_data <- read_excel("training_scaled_dataset.xlsx")
test_data <- read_excel("testing_scaled_dataset.xlsx")
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(train_data)[-1]
#Identify whether samples are lymph node negative or possitive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe & transpose
sample_labels <- as.data.frame(t(status_binary))
# Ensure column names match train_data (excluding first column)
colnames(sample_labels) <- sample_status
# Convert label row into a proper column
sample_labels <- as.data.frame(t(sample_labels))
sample_labels <- cbind(Sample = rownames(sample_labels), Label = as.numeric(sample_labels[,1]))
# Transpose train_data so that samples are rows and genes are columns
train_data_t <- as.data.frame(t(train_data[-1]))  # Exclude the 'Gene_symbol' column before transposing
colnames(train_data_t) <- train_data$Gene_symbol  # Rename columns using Gene_symbol
# Reset row names to avoid "V1, V2, ..." issue (using the sample names as row names)
rownames(train_data_t) <- colnames(train_data)[-1]  # Use the sample names as row names
# Merge features with labels
train_data_final <- cbind(train_data_t, Label = sample_labels$Label)
library(readxl)
library(writexl)
# Load datasets
train_data <- read_excel("training_scaled_dataset.xlsx")
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(train_data)[-1]
# Identify whether samples are lymph node negative or positive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe & transpose
sample_labels <- as.data.frame(t(status_binary))  # Transpose to get labels as a column
# Ensure the column name is correct
colnames(sample_labels) <- "Label"  # Rename to "Label"
# Transpose train_data so that samples are rows and genes are columns
train_data_t <- as.data.frame(t(train_data[-1]))  # Exclude the 'Gene_symbol' column before transposing
colnames(train_data_t) <- train_data$Gene_symbol  # Rename columns using Gene_symbol
# Reset row names to avoid "V1, V2, ..." issue (using the sample names as row names)
rownames(train_data_t) <- colnames(train_data)[-1]  # Use the sample names as row names
# Add the Label column (Make sure sample_labels has the same number of rows as the transposed data)
train_data_final <- cbind(train_data_t, Label = sample_labels$Label)  # Add Label column
# Print to verify
print(train_data_final)
library(readxl)
library(writexl)
# Load datasets
train_data <- read_excel("training_scaled_dataset.xlsx")
test_data <- read_excel("testing_scaled_dataset.xlsx")
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(train_data)[-1]
# Identify whether samples are lymph node negative or positive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe & transpose
sample_labels <- as.data.frame(t(status_binary))  # Transpose to get labels as a column
# Ensure the column name is correct
colnames(sample_labels) <- "Label"  # Rename to "Label"
# Transpose train_data so that samples are rows and genes are columns
train_data_t <- as.data.frame(t(train_data[-1]))  # Exclude the 'Gene_symbol' column before transposing
colnames(train_data_t) <- train_data$Gene_symbol  # Rename columns using Gene_symbol
# Reset row names to avoid "V1, V2, ..." issue (using the sample names as row names)
rownames(train_data_t) <- colnames(train_data)[-1]  # Use the sample names as row names
# Add the Label column (Make sure sample_labels has the same number of rows as the transposed data)
train_data <- cbind(train_data_t, Label = sample_labels$Label)  # Add Label column
# Repeat for testing data
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(test_data)[-1]
# Identify whether samples are lymph node negative or positive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe & transpose
sample_labels <- as.data.frame(t(status_binary))  # Transpose to get labels as a column
# Ensure the column name is correct
colnames(sample_labels) <- "Label"  # Rename to "Label"
# Transpose test_data so that samples are rows and genes are columns
test_data_t <- as.data.frame(t(test_data[-1]))  # Exclude the 'Gene_symbol' column before transposing
colnames(test_data_t) <- test_data$Gene_symbol  # Rename columns using Gene_symbol
# Reset row names to avoid "V1, V2, ..." issue (using the sample names as row names)
rownames(test_data_t) <- colnames(test_data)[-1]  # Use the sample names as row names
# Add the Label column (Make sure sample_labels has the same number of rows as the transposed data)
test_data <- cbind(test_data_t, Label = sample_labels$Label)  # Add Label column
View(train_data)
View(test_data)
library(readxl)
library(writexl)
# Load datasets
train_data <- read_excel("training_scaled_dataset.xlsx")
test_data <- read_excel("testing_scaled_dataset.xlsx")
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(train_data)[-1]
# Identify whether samples are lymph node negative or positive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe & transpose
sample_labels <- as.data.frame(t(status_binary))  # Transpose to get labels as a column
sample_labels
e is correct
# Ensure the column name is correct
colnames(sample_labels) <- "Label"  # Rename to "Label"
# Transpose train_data so that samples are rows and genes are columns
train_data_t <- as.data.frame(t(train_data[-1]))  # Exclude the 'Gene_symbol' column before transposing
colnames(train_data_t) <- train_data$Gene_symbol  # Rename columns using Gene_symbol
# Reset row names to avoid "V1, V2, ..." issue (using the sample names as row names)
rownames(train_data_t) <- colnames(train_data)[-1]  # Use the sample names as row names
# Add the Label column (Make sure sample_labels has the same number of rows as the transposed data)
train_data <- cbind(train_data_t, Label = sample_labels$Label)  # Add Label column
train_data
View(train_data)
library(readxl)
library(writexl)
# Load datasets
train_data <- read_excel("training_scaled_dataset.xlsx")
test_data <- read_excel("testing_scaled_dataset.xlsx")
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(train_data)[-1]
# Identify whether samples are lymph node negative or positive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe & transpose (Make sure to keep the labels in the correct format)
sample_labels <- data.frame(Label = status_binary)
# Transpose train_data so that samples are rows and genes are columns
train_data_t <- as.data.frame(t(train_data[-1]))  # Exclude the 'Gene_symbol' column before transposing
colnames(train_data_t) <- train_data$Gene_symbol  # Rename columns using Gene_symbol
# Reset row names to avoid "V1, V2, ..." issue (using the sample names as row names)
rownames(train_data_t) <- colnames(train_data)[-1]  # Use the sample names as row names
# Add the Label column (Ensure the number of rows matches between train_data_t and sample_labels)
train_data_final <- cbind(train_data_t, Label = sample_labels$Label)  # Add Label column
# Print to verify the structure
print(train_data_final)
View(train_data_final)
library(readxl)
library(writexl)
# Load datasets
train_data <- read_excel("training_scaled_dataset.xlsx")
test_data <- read_excel("testing_scaled_dataset.xlsx")
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(train_data)[-1]
# Identify whether samples are lymph node negative or positive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe & transpose (Make sure to keep the labels in the correct format)
sample_labels <- data.frame(Label = status_binary)
# Transpose train_data so that samples are rows and genes are columns
train_data_t <- as.data.frame(t(train_data[-1]))  # Exclude the 'Gene_symbol' column before transposing
colnames(train_data_t) <- train_data$Gene_symbol  # Rename columns using Gene_symbol
# Reset row names to avoid "V1, V2, ..." issue (using the sample names as row names)
rownames(train_data_t) <- colnames(train_data)[-1]  # Use the sample names as row names
# Add the Label column (Ensure the number of rows matches between train_data_t and sample_labels)
train_data_final <- cbind(train_data_t, Label = sample_labels$Label)  # Add Label column
# Print to verify the structure
print(train_data_final)
# Repeat for testing datalibrary(readxl)
library(writexl)
# Load datasets
train_data <- read_excel("training_scaled_dataset.xlsx")
test_data <- read_excel("testing_scaled_dataset.xlsx")
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(test_data)[-1]
# Identify whether samples are lymph node negative or positive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe & transpose (Make sure to keep the labels in the correct format)
sample_labels <- data.frame(Label = status_binary)
# Transpose test_data so that samples are rows and genes are columns
test_data_t <- as.data.frame(t(test_data[-1]))  # Exclude the 'Gene_symbol' column before transposing
colnames(test_data_t) <- test_data$Gene_symbol  # Rename columns using Gene_symbol
# Reset row names to avoid "V1, V2, ..." issue (using the sample names as row names)
rownames(test_data_t) <- colnames(test_data)[-1]  # Use the sample names as row names
# Add the Label column (Ensure the number of rows matches between test_data_t and sample_labels)
test_data_final <- cbind(test_data_t, Label = sample_labels$Label)  # Add Label column
# Print to verify the structure
print(test_data_final)
View(test_data_final)
View(test_data_final)
#Logistic regression
library(tidymodels)
logistic_regression_train <- logistic_reg(Label ~ ., #what is predicted, what do I put?
data = train_data_final)
library(readxl)
library(writexl)
# Load datasets
train_data <- read_excel("training_scaled_dataset.xlsx")
test_data <- read_excel("testing_scaled_dataset.xlsx")
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(train_data)[-1]
# Identify whether samples are lymph node negative or positive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe & transpose (Make sure to keep the labels in the correct format)
sample_labels <- data.frame(Label = status_binary)
# Transpose train_data so that samples are rows and genes are columns
train_data_t <- as.data.frame(t(train_data[-1]))  # Exclude the 'Gene_symbol' column before transposing
colnames(train_data_t) <- train_data$Gene_symbol  # Rename columns using Gene_symbol
# Reset row names to avoid "V1, V2, ..." issue (using the sample names as row names)
rownames(train_data_t) <- colnames(train_data)[-1]  # Use the sample names as row names
# Add the Label column (Ensure the number of rows matches between train_data_t and sample_labels)
train_data_final <- cbind(train_data_t, Label = sample_labels$Label)  # Add Label column
train_data_final$Label <- as.factor(train_data_final$Label)
#Random forest
#install.packages("randomForest")
library(randomForest)
set.seed(123)
random_forest_train <- randomForest(Label ~ ., #what is predicted, what do I put?
data = train_data_final)
View(train_data_final)
#Logistic regression
library(tidymodels)
logistic_regression_train <- logistic_reg(penalty = model_list[[c]]$penalty, mixture = model_list[[c]]$mixture) %>%
set_engine("glmnet") %>%
set_mode("classification") %>%
fit(Label ~ ., data = train_data_final)
library(glmnet)
install.packages("glmnet")
ibrary(tidymodels)
library(tidymodels)
library(glmnet)
logistic_regression_train <- logistic_reg(penalty = model_list[[c]]$penalty, mixture = model_list[[c]]$mixture) %>%
set_engine("glmnet") %>%
set_mode("classification") %>%
fit(Label ~ ., data = train_data_final)
library(tidymodels)
library(glmnet)
logistic_regression_train <- logistic_reg() %>%
set_engine("glmnet") %>%
set_mode("classification") %>%
fit(Label ~ ., data = train_data_final)
library(tidymodels)
library(glmnet)
logistic_regression_train <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification") %>%
fit(Label ~ ., data = train_data_final)
summary(logistic_regression_train)
library(randomForest)
set.seed(123)
random_forest_train <- randomForest(Label ~ ., #what is predicted, what do I put?
data = train_data_final)
#Logistic regression
library(tidymodels)
library(glmnet)
logistic_regression_train <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification") %>%
fit(Label ~ ., data = train_data_final)
# Extract fitted model
logistic_model <- extract_fit_parsnip(logistic_regression_train)
#Logistic regression
library(tidymodels)
library(glmnet)
logistic_regression_train <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification") %>%
fit(Label ~ ., data = train_data_final)
# Print model summary
summary(logistic_model$fit)
#Logistic regression
library(tidymodels)
library(glmnet)
logistic_regression_train <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification") %>%
fit(Label ~ ., data = train_data_final)
# Print model summary
summary(logistic_regression_train$fit)
View(train_data_final)
#package, library
lr_prediction_test <- predict(logistic_regression_train, newdata = test_data_final)
#package, library
lr_prediction_test <- predict(logistic_regression_train, new_data = test_data_final)
library(tidymodels)
library(glmnet)
logistic_spec <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification")
# Create workflow
workflow_model <- workflow() %>%
add_recipe(recipe_spec) %>%
add_model(logistic_spec) %>%
fit(data = train_data_final)
#Logistic regression
library(tidymodels)
library(glmnet)
recipe_spec <- recipe(Label ~ ., data = train_data_final)
logistic_spec <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification")
# Create workflow
workflow_model <- workflow() %>%
add_recipe(recipe_spec) %>%
add_model(logistic_spec) %>%
fit(data = train_data_final)
# Extract and summarize model
logistic_model <- extract_fit_parsnip(workflow_model)
summary(logistic_model$fit)
