status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe & transpose (Make sure to keep the labels in the correct format)
sample_labels <- data.frame(Label = status_binary)
# Transpose train_data so that samples are rows and genes are columns
train_data_t <- as.data.frame(t(train_data[-1]))  # Exclude the 'Gene_symbol' column before transposing
colnames(train_data_t) <- train_data$Gene_symbol  # Rename columns using Gene_symbol
# Reset row names to avoid "V1, V2, ..." issue (using the sample names as row names)
rownames(train_data_t) <- colnames(train_data)[-1]  # Use the sample names as row names
# Add the Label column (Ensure the number of rows matches between train_data_t and sample_labels)
train_data_final <- cbind(train_data_t, Label = sample_labels$Label)  # Add Label column
train_data_final$Label <- as.factor(train_data_final$Label)
# Repeat for testing datalibrary(readxl)
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(test_data)[-1]
# Identify whether samples are lymph node negative or positive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe & transpose (Make sure to keep the labels in the correct format)
sample_labels <- data.frame(Label = status_binary)
# Transpose test_data so that samples are rows and genes are columns
test_data_t <- as.data.frame(t(test_data[-1]))  # Exclude the 'Gene_symbol' column before transposing
colnames(test_data_t) <- test_data$Gene_symbol  # Rename columns using Gene_symbol
# Reset row names to avoid "V1, V2, ..." issue (using the sample names as row names)
rownames(test_data_t) <- colnames(test_data)[-1]  # Use the sample names as row names
# Add the Label column (Ensure the number of rows matches between test_data_t and sample_labels)
test_data_final <- cbind(test_data_t, Label = sample_labels$Label)  # Add Label column
test_data_final$Label <- as.factor(test_data_final$Label)
# Logistic regression
#can tune hyperparameters
library(tidymodels)
library(glmnet)
logistic_regression_train <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification") %>%
fit(Label ~ ., data = train_data_final)
# Print model summary
summary(logistic_regression_train$fit)
dim(train_data_final)
dim(test_data_final)
#package, library
lr_prediction_test <- predict(logistic_regression_train, new_data = test_data_final)
# Compare predicted results to real data
summary(lr_prediction_test)
table(test_data_final$Label)
#Confusion matrix
library(caret)
confusionMatrix(data=lr_prediction_test$.pred_class, reference = test_data_final$Label)
# Remove all "-" characters and replace all "*" characters, so that RF can work
clean_names <- function(x) {
x <- gsub("[^A-Za-z0-9*]", "", x)  # Remove all special characters except *
x <- gsub("\\*", "2", x)           # Replace * with 2
return(x)
}
# Columns & rows replacement
colnames(train_data_final) <- clean_names(colnames(train_data_final))
rownames(train_data_final) <- clean_names(rownames(train_data_final))
# Repeat for testing
colnames(test_data_final) <- clean_names(colnames(test_data_final))
rownames(test_data_final) <- clean_names(rownames(test_data_final))
#remove all - & * (dupes) from the genes, samples etc (special characters)
#Random forest
library(randomForest)
set.seed(123)
random_forest_train <- randomForest(Label ~ .,
data = train_data_final)
summary(random_forest_train)
rf_prediction_test <- predict(random_forest_train, newdata = test_data_final)
summary(rf_prediction_test)
table(test_data_final$Label)
#Confusion matrix
confusionMatrix(data=rf_prediction_test, reference = test_data_final$Label)
#XGBoost
library(xgboost)
# Prepare for XGBoost
# Extract labels
train_labels <- as.numeric(as.factor(train_data_final$Label)) - 1
test_labels  <- as.numeric(as.factor(test_data_final$Label)) - 1
# Extract features (remove the label column)
train_matrix <- as.matrix(train_data_final[, setdiff(names(train_data_final), "Label")])
test_matrix  <- as.matrix(test_data_final[, setdiff(names(test_data_final), "Label")])
head(train_matrix)
class(train_matrix)
#class(train_matrix$kshviRK1210a)
#class(train_matrix$Label)
# Create DMatrix objects
dtrain <- xgb.DMatrix(data = train_matrix, label = train_labels)
dtest  <- xgb.DMatrix(data = test_matrix, label = test_labels)
getinfo(dtrain, "label")  # returns the labels
dim(dtrain)               # returns dimensions
# Run XGBoost
xgb_model <- xgboost(,
data = dtrain,
nrounds = 100,
objective = "binary:logistic",
eval_metric = "logloss"
)
# Predict probabilities on the test set
xgb_prediction_test <- predict(xgb_model, dtest)
prediction <- as.numeric(xgb_prediction_test > 0.5)
print(head(prediction))
summary(prediction)
table(test_data_final$Label)
#Confusion matrix
# Check factor levels
levels(factor(prediction))
levels(factor(test_data_final$Label))
confusionMatrix(data=prediction, reference = test_data_final$Label)
# Run XGBoost
xgb_model <- xgboost(
data = dtrain,
nrounds = 100,
objective = "binary:logistic",
eval_metric = "logloss"
)
# Predict probabilities on the test set
xgb_prediction_test <- predict(xgb_model, dtest)
prediction <- as.numeric(xgb_prediction_test > 0.5)
print(head(prediction))
summary(prediction)
table(test_data_final$Label)
#Confusion matrix
# Check factor levels
levels(factor(prediction))
levels(factor(test_data_final$Label))
confusionMatrix(data=prediction, reference = test_data_final$Label)
library(readxl)
library(writexl)
# Load datasets
train_data <- read_excel("training_scaled_dataset.xlsx")
test_data <- read_excel("testing_scaled_dataset.xlsx")
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(train_data)[-1]
# Identify whether samples are lymph node negative or positive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe & transpose (Make sure to keep the labels in the correct format)
sample_labels <- data.frame(Label = status_binary)
# Transpose train_data so that samples are rows and genes are columns
train_data_t <- as.data.frame(t(train_data[-1]))  # Exclude the 'Gene_symbol' column before transposing
colnames(train_data_t) <- train_data$Gene_symbol  # Rename columns using Gene_symbol
# Reset row names to avoid "V1, V2, ..." issue (using the sample names as row names)
rownames(train_data_t) <- colnames(train_data)[-1]  # Use the sample names as row names
# Add the Label column (Ensure the number of rows matches between train_data_t and sample_labels)
train_data_final <- cbind(train_data_t, Label = sample_labels$Label)  # Add Label column
train_data_final$Label <- as.factor(train_data_final$Label)
# Repeat for testing datalibrary(readxl)
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(test_data)[-1]
# Identify whether samples are lymph node negative or positive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe & transpose (Make sure to keep the labels in the correct format)
sample_labels <- data.frame(Label = status_binary)
# Transpose test_data so that samples are rows and genes are columns
test_data_t <- as.data.frame(t(test_data[-1]))  # Exclude the 'Gene_symbol' column before transposing
colnames(test_data_t) <- test_data$Gene_symbol  # Rename columns using Gene_symbol
# Reset row names to avoid "V1, V2, ..." issue (using the sample names as row names)
rownames(test_data_t) <- colnames(test_data)[-1]  # Use the sample names as row names
# Add the Label column (Ensure the number of rows matches between test_data_t and sample_labels)
test_data_final <- cbind(test_data_t, Label = sample_labels$Label)  # Add Label column
test_data_final$Label <- as.factor(test_data_final$Label)
# Logistic regression
#can tune hyperparameters
library(tidymodels)
library(glmnet)
logistic_regression_train <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification") %>%
fit(Label ~ ., data = train_data_final)
# Print model summary
summary(logistic_regression_train$fit)
dim(train_data_final)
dim(test_data_final)
#package, library
lr_prediction_test <- predict(logistic_regression_train, new_data = test_data_final)
# Compare predicted results to real data
summary(lr_prediction_test)
table(test_data_final$Label)
#Confusion matrix
library(caret)
confusionMatrix(data=lr_prediction_test$.pred_class, reference = test_data_final$Label)
# Remove all "-" characters and replace all "*" characters, so that RF can work
clean_names <- function(x) {
x <- gsub("[^A-Za-z0-9*]", "", x)  # Remove all special characters except *
x <- gsub("\\*", "2", x)           # Replace * with 2
return(x)
}
# Columns & rows replacement
colnames(train_data_final) <- clean_names(colnames(train_data_final))
rownames(train_data_final) <- clean_names(rownames(train_data_final))
# Repeat for testing
colnames(test_data_final) <- clean_names(colnames(test_data_final))
rownames(test_data_final) <- clean_names(rownames(test_data_final))
#remove all - & * (dupes) from the genes, samples etc (special characters)
#Random forest
library(randomForest)
set.seed(123)
random_forest_train <- randomForest(Label ~ .,
data = train_data_final)
summary(random_forest_train)
rf_prediction_test <- predict(random_forest_train, newdata = test_data_final)
summary(rf_prediction_test)
table(test_data_final$Label)
#Confusion matrix
confusionMatrix(data=rf_prediction_test, reference = test_data_final$Label)
#XGBoost
library(xgboost)
# Prepare for XGBoost
# Extract labels
train_labels <- as.numeric(as.factor(train_data_final$Label)) - 1
test_labels  <- as.numeric(as.factor(test_data_final$Label)) - 1
# Extract features (remove the label column)
train_matrix <- as.matrix(train_data_final[, setdiff(names(train_data_final), "Label")])
test_matrix  <- as.matrix(test_data_final[, setdiff(names(test_data_final), "Label")])
head(train_matrix)
class(train_matrix)
#class(train_matrix$kshviRK1210a)
#class(train_matrix$Label)
# Create DMatrix objects
dtrain <- xgb.DMatrix(data = train_matrix, label = train_labels)
dtest  <- xgb.DMatrix(data = test_matrix, label = test_labels)
getinfo(dtrain, "label")  # returns the labels
dim(dtrain)               # returns dimensions
# Run XGBoost
xgb_model <- xgboost(
data = dtrain,
nrounds = 100,
objective = "binary:logistic",
eval_metric = "logloss"
)
# Predict probabilities
xgb_prediction_test <- predict(xgb_model, dtest)
prediction <- as.numeric(xgb_prediction_test > 0.5)
# True labels as 0/1
true_labels <- as.numeric(as.factor(test_data_final$Label)) - 1
# Confusion matrix
library(caret)
confusionMatrix(
data = factor(prediction, levels = c(0, 1)),
reference = factor(true_labels, levels = c(0, 1))
)
labels <- as.numeric(as.factor(test_data_final$Label))
labels
library(readxl)
library(writexl)
# Load datasets
train_data <- read_excel("training_scaled_dataset.xlsx")
test_data <- read_excel("testing_scaled_dataset.xlsx")
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(train_data)[-1]
# Identify whether samples are lymph node negative or positive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe & transpose (Make sure to keep the labels in the correct format)
sample_labels <- data.frame(Label = status_binary)
# Transpose train_data so that samples are rows and genes are columns
train_data_t <- as.data.frame(t(train_data[-1]))  # Exclude the 'Gene_symbol' column before transposing
colnames(train_data_t) <- train_data$Gene_symbol  # Rename columns using Gene_symbol
# Reset row names to avoid "V1, V2, ..." issue (using the sample names as row names)
rownames(train_data_t) <- colnames(train_data)[-1]  # Use the sample names as row names
# Add the Label column (Ensure the number of rows matches between train_data_t and sample_labels)
train_data_final <- cbind(train_data_t, Label = sample_labels$Label)  # Add Label column
train_data_final$Label <- as.factor(train_data_final$Label)
# Repeat for testing datalibrary(readxl)
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(test_data)[-1]
# Identify whether samples are lymph node negative or positive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe & transpose (Make sure to keep the labels in the correct format)
sample_labels <- data.frame(Label = status_binary)
# Transpose test_data so that samples are rows and genes are columns
test_data_t <- as.data.frame(t(test_data[-1]))  # Exclude the 'Gene_symbol' column before transposing
colnames(test_data_t) <- test_data$Gene_symbol  # Rename columns using Gene_symbol
# Reset row names to avoid "V1, V2, ..." issue (using the sample names as row names)
rownames(test_data_t) <- colnames(test_data)[-1]  # Use the sample names as row names
# Add the Label column (Ensure the number of rows matches between test_data_t and sample_labels)
test_data_final <- cbind(test_data_t, Label = sample_labels$Label)  # Add Label column
test_data_final$Label <- as.factor(test_data_final$Label)
# Logistic regression
#can tune hyperparameters
library(tidymodels)
library(glmnet)
logistic_regression_train <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification") %>%
fit(Label ~ ., data = train_data_final)
# Print model summary
summary(logistic_regression_train$fit)
dim(train_data_final)
dim(test_data_final)
#package, library
lr_prediction_test <- predict(logistic_regression_train, new_data = test_data_final)
# Compare predicted results to real data
summary(lr_prediction_test)
table(test_data_final$Label)
#Confusion matrix
library(caret)
confusionMatrix(data=lr_prediction_test$.pred_class, reference = test_data_final$Label)
# Remove all "-" characters and replace all "*" characters, so that RF can work
clean_names <- function(x) {
x <- gsub("[^A-Za-z0-9*]", "", x)  # Remove all special characters except *
x <- gsub("\\*", "2", x)           # Replace * with 2
return(x)
}
# Columns & rows replacement
colnames(train_data_final) <- clean_names(colnames(train_data_final))
rownames(train_data_final) <- clean_names(rownames(train_data_final))
# Repeat for testing
colnames(test_data_final) <- clean_names(colnames(test_data_final))
rownames(test_data_final) <- clean_names(rownames(test_data_final))
#remove all - & * (dupes) from the genes, samples etc (special characters)
#Random forest
library(randomForest)
set.seed(123)
random_forest_train <- randomForest(Label ~ .,
data = train_data_final)
summary(random_forest_train)
rf_prediction_test <- predict(random_forest_train, newdata = test_data_final)
summary(rf_prediction_test)
table(test_data_final$Label)
#Confusion matrix
confusionMatrix(data=rf_prediction_test, reference = test_data_final$Label)
#XGBoost
library(xgboost)
# Prepare for XGBoost
# Extract labels
train_labels <- as.numeric(as.factor(train_data_final$Label)) - 1
test_labels  <- as.numeric(as.factor(test_data_final$Label)) - 1
# Extract features (remove the label column)
train_matrix <- as.matrix(train_data_final[, setdiff(names(train_data_final), "Label")])
test_matrix  <- as.matrix(test_data_final[, setdiff(names(test_data_final), "Label")])
head(train_matrix)
class(train_matrix)
#class(train_matrix$kshviRK1210a)
#class(train_matrix$Label)
# Create DMatrix objects
dtrain <- xgb.DMatrix(data = train_matrix, label = train_labels)
dtest  <- xgb.DMatrix(data = test_matrix, label = test_labels)
getinfo(dtrain, "label")  # returns the labels
dim(dtrain)               # returns dimensions
# Run XGBoost
xgb_model <- xgboost(
data = dtrain,
nrounds = 100,
objective = "binary:logistic",
eval_metric = "logloss"
)
# Predict probabilities on the test set
xgb_prediction_test <- predict(xgb_model, dtest)
prediction <- as.numeric(xgb_prediction_test > 0.5)
print(head(prediction))
summary(prediction)
table(test_data_final$Label)
#Confusion matrix
# Labels as 0/1
labels <- as.numeric(as.factor(test_data_final$Label)) - 1
# Confusion matrix
confusionMatrix(
data = factor(prediction, levels = c(0, 1)),
reference = factor(labels, levels = c(0, 1))
)
library(readxl)
library(writexl)
# Load datasets
train_data <- read_excel("training_scaled_dataset.xlsx")
test_data <- read_excel("testing_scaled_dataset.xlsx")
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(train_data)[-1]
# Identify whether samples are lymph node negative or positive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe & transpose (Make sure to keep the labels in the correct format)
sample_labels <- data.frame(Label = status_binary)
# Transpose train_data so that samples are rows and genes are columns
train_data_t <- as.data.frame(t(train_data[-1]))  # Exclude the 'Gene_symbol' column before transposing
colnames(train_data_t) <- train_data$Gene_symbol  # Rename columns using Gene_symbol
# Reset row names to avoid "V1, V2, ..." issue (using the sample names as row names)
rownames(train_data_t) <- colnames(train_data)[-1]  # Use the sample names as row names
# Add the Label column (Ensure the number of rows matches between train_data_t and sample_labels)
train_data_final <- cbind(train_data_t, Label = sample_labels$Label)  # Add Label column
train_data_final$Label <- as.factor(train_data_final$Label)
# Repeat for testing datalibrary(readxl)
# Identify sample names (excluding 'Gene_symbol')
sample_status <- colnames(test_data)[-1]
# Identify whether samples are lymph node negative or positive
status_binary <- ifelse(grepl("-IIIC$", sample_status), 0, 1)
# Convert to a dataframe & transpose (Make sure to keep the labels in the correct format)
sample_labels <- data.frame(Label = status_binary)
# Transpose test_data so that samples are rows and genes are columns
test_data_t <- as.data.frame(t(test_data[-1]))  # Exclude the 'Gene_symbol' column before transposing
colnames(test_data_t) <- test_data$Gene_symbol  # Rename columns using Gene_symbol
# Reset row names to avoid "V1, V2, ..." issue (using the sample names as row names)
rownames(test_data_t) <- colnames(test_data)[-1]  # Use the sample names as row names
# Add the Label column (Ensure the number of rows matches between test_data_t and sample_labels)
test_data_final <- cbind(test_data_t, Label = sample_labels$Label)  # Add Label column
test_data_final$Label <- as.factor(test_data_final$Label)
# Logistic regression
#can tune hyperparameters
library(tidymodels)
library(glmnet)
logistic_regression_train <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification") %>%
fit(Label ~ ., data = train_data_final)
# Print model summary
summary(logistic_regression_train$fit)
dim(train_data_final)
dim(test_data_final)
#package, library
lr_prediction_test <- predict(logistic_regression_train, new_data = test_data_final)
# Compare predicted results to real data
summary(lr_prediction_test)
table(test_data_final$Label)
#Confusion matrix
library(caret)
confusionMatrix(data=lr_prediction_test$.pred_class, reference = test_data_final$Label)
# Remove all "-" characters and replace all "*" characters, so that RF can work
clean_names <- function(x) {
x <- gsub("[^A-Za-z0-9*]", "", x)  # Remove all special characters except *
x <- gsub("\\*", "2", x)           # Replace * with 2
return(x)
}
# Columns & rows replacement
colnames(train_data_final) <- clean_names(colnames(train_data_final))
rownames(train_data_final) <- clean_names(rownames(train_data_final))
# Repeat for testing
colnames(test_data_final) <- clean_names(colnames(test_data_final))
rownames(test_data_final) <- clean_names(rownames(test_data_final))
#remove all - & * (dupes) from the genes, samples etc (special characters)
#Random forest
library(randomForest)
set.seed(123)
random_forest_train <- randomForest(Label ~ .,
data = train_data_final)
summary(random_forest_train)
rf_prediction_test <- predict(random_forest_train, newdata = test_data_final)
summary(rf_prediction_test)
table(test_data_final$Label)
#Confusion matrix
confusionMatrix(data=rf_prediction_test, reference = test_data_final$Label)
#XGBoost
library(xgboost)
# Prepare for XGBoost
# Extract labels
train_labels <- as.numeric(as.factor(train_data_final$Label)) - 1
test_labels  <- as.numeric(as.factor(test_data_final$Label)) - 1
# Extract features (remove the label column)
train_matrix <- as.matrix(train_data_final[, setdiff(names(train_data_final), "Label")])
test_matrix  <- as.matrix(test_data_final[, setdiff(names(test_data_final), "Label")])
head(train_matrix)
class(train_matrix)
#class(train_matrix$kshviRK1210a)
#class(train_matrix$Label)
# Create DMatrix objects
dtrain <- xgb.DMatrix(data = train_matrix, label = train_labels)
dtest  <- xgb.DMatrix(data = test_matrix, label = test_labels)
getinfo(dtrain, "label")  # returns the labels
dim(dtrain)               # returns dimensions
# Run XGBoost
xgb_model <- xgboost(
data = dtrain,
nrounds = 100,
objective = "binary:logistic",
eval_metric = "logloss"
)
# Predict probabilities on the test set
xgb_prediction_test <- predict(xgb_model, dtest)
prediction <- as.numeric(xgb_prediction_test > 0.5)
print(head(prediction))
summary(prediction)
table(test_data_final$Label)
#Confusion matrix
# Labels as 0/1
labels <- as.numeric(as.factor(test_data_final$Label)) - 1
# Confusion matrix
confusionMatrix(
data = factor(prediction, levels = c(0, 1)),
reference = factor(labels, levels = c(0, 1))
)
xgb_prediction_test <- predict(xgb_model, dtest)
xgb_prediction_test
print(dtest)
labels <- as.numeric(as.factor(test_data_final$Label)) - 1
test_data_final$Label
# Predict probabilities on the test set
xgb_prediction_test <- predict(xgb_model, dtest)
print(dtest)
prediction <- as.numeric(xgb_prediction_test < 0.5)
print(head(prediction))
summary(prediction)
table(test_data_final$Label)
#Confusion matrix
# Labels as 0/1
labels <- as.numeric(as.factor(test_data_final$Label)) - 1
# Confusion matrix
confusionMatrix(
data = factor(prediction, levels = c(0, 1)),
reference = factor(labels, levels = c(0, 1))
)
# Predict probabilities on the test set
xgb_prediction_test <- predict(xgb_model, dtest)
print(dtest)
prediction <- as.numeric(xgb_prediction_test > 0.5)
print(head(prediction))
summary(prediction)
table(test_data_final$Label)
#Confusion matrix
# Labels as 0/1
labels <- as.numeric(as.factor(test_data_final$Label)) - 1
# Confusion matrix
confusionMatrix(
data = factor(prediction, levels = c(0, 1)),
reference = factor(labels, levels = c(0, 1))
)
confusionMatrix(data=rf_prediction_test, reference = test_data_final$Label)
confusionMatrix(data=lr_prediction_test$.pred_class, reference = test_data_final$Label)
dim(train_data)
